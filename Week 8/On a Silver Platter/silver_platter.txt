“If it eats like a food, then it’s a food” Ok, it doesn’t have the same ring as the “quacks like a duck” saying, but we can still have some fun with food for this exercise on duck typing.

Define the following classes:
Fruit, which implements a custom to_s method
Apple, which extends Fruit, overrides the to_s method and implements an eat method
Banana, which extends Fruit, overrides the to_s method and implements an eat method
Cheese, which implements a custom to_s method as well as an eat method
Sausage, which implements a custom to_s method as well as an eat method
Under the class definitions, create a variable called silver_platter that stores a list of at least one instance of each class you defined above. Then, iterate through the list using each, first printing out the object using its to_s, then calling the eat method. Did you run into any problems? Why or why not? (Include your written answer in your PR description.)

Remove the error by updating what is in your silver_platter list. What did you have to remove, and why? (Include your written answer in your PR description.)

Finally, add whatever you removed back to the list, and use respond_to? to fix the error.



Did you run into any problems? Why or why not? (Include your written answer in your PR description.)

Yes a number of problems occurred:
Extend - You can't use the keyword extend on a class, it's a reserved keyword for Module. So in the classes "Apple" and "Banana", an error will be thrown 
         as they are both trying to extend the class Fruit which is illegal.
eat method - As the class "Fruit" doesn't have an eat method, when we try to iterate over our list, it'll throw an error when it reaches the instance of "Fruit"
          becase it doesn't have a method called eat.